
import std.stdio (Stdin, Stdout)
import std.sys
import std.json (Json)
import std.time (DateTime)
import std.locale.en (Locale)
import toml (TomlValue, from_string)

type async Main {
  fn async main {
    let bytes = ByteArray.new
    let _ = Stdin.new.read_all(mut bytes)

    let toml_table = match from_string(bytes.to_string) {
      case Error(error) -> {
        let _ = Stdout.new.print("${error.line}:${error.column} error: ${error.desc}")
        sys.exit(1)
      }
      case Ok(table) -> table
    }
    let json = toml_to_json(toml_table)
    Stdout.new.print(json.to_string)
  }

  fn toml_to_json(toml: TomlValue) -> Json {
    match toml {
      case String(str) -> toml_json_value("string", str)
      case Int(int) -> toml_json_value("integer", int.to_string)
      case Float(float) -> toml_json_value("float", float.to_string)
      case Bool(bool) -> toml_json_value("bool", bool.to_string)
      case DateTime(datetime) -> toml_json_value("datetime", datetime.to_iso8601)
      case Date(date) -> {
        toml_json_value("date", DateTime.new(date, DateTime.local.time, 0).format("%H:%M:%S", Locale.new))
      }
      case Time(time) -> {
        toml_json_value("time", DateTime.new(DateTime.local.date, time, 0).format("%Y-%m-%d", Locale.new))
      }
      case Array(array) -> Json.Array(array.iter.map(fn (val) { toml_to_json(val.clone) }).to_array)
      case Table(table) -> {
        let mut json_object: Map[String, Json] = Map.new
        for entry in table {
          json_object.set(entry.key, toml_to_json(entry.value.clone))
        }
        Json.Object(json_object)
      }
    }
  }

  fn toml_json_value(type_name: String, value: String) -> Json {
    let map: Map[String, Json] = Map.new
    map.set("type", Json.String(type_name))
    map.set("value", Json.String(value))
    return Json.Object(map)
  }
}
